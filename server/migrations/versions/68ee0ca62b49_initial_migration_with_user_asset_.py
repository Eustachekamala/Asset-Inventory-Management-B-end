"""Initial migration with User, Asset, Category, Request, and RequestHistory models

Revision ID: 68ee0ca62b49
Revises: 
Create Date: 2024-11-06 19:40:01.746352

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '68ee0ca62b49'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('RequestHistory')
    op.drop_table('Request')
    op.drop_table('Asset')
    op.drop_table('User')
    op.drop_table('Category')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Category',
    sa.Column('category_id', sa.INTEGER(), server_default=sa.text('nextval(\'"Category_category_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('category_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('category_id', name='Category_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('User',
    sa.Column('user_id', sa.INTEGER(), server_default=sa.text('nextval(\'"User_user_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("role::text = ANY (ARRAY['Admin'::character varying, 'Procurement_Manager'::character varying, 'Employee'::character varying]::text[])", name='User_role_check'),
    sa.PrimaryKeyConstraint('user_id', name='User_pkey'),
    sa.UniqueConstraint('username', name='User_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('Asset',
    sa.Column('asset_id', sa.INTEGER(), server_default=sa.text('nextval(\'"Asset_asset_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('allocated_to', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['Available'::character varying, 'Allocated'::character varying, 'Under_Repair'::character varying]::text[])", name='Asset_status_check'),
    sa.ForeignKeyConstraint(['allocated_to'], ['User.user_id'], name='Asset_allocated_to_fkey'),
    sa.ForeignKeyConstraint(['category_id'], ['Category.category_id'], name='Asset_category_id_fkey'),
    sa.PrimaryKeyConstraint('asset_id', name='Asset_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('Request',
    sa.Column('request_id', sa.INTEGER(), server_default=sa.text('nextval(\'"Request_request_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('request_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('urgency', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("request_type::text = ANY (ARRAY['New_Asset'::character varying, 'Repair'::character varying]::text[])", name='Request_request_type_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['Pending'::character varying, 'Approved'::character varying, 'Rejected'::character varying]::text[])", name='Request_status_check'),
    sa.CheckConstraint("urgency::text = ANY (ARRAY['Low'::character varying, 'Medium'::character varying, 'High'::character varying]::text[])", name='Request_urgency_check'),
    sa.ForeignKeyConstraint(['asset_id'], ['Asset.asset_id'], name='Request_asset_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['User.user_id'], name='Request_user_id_fkey'),
    sa.PrimaryKeyConstraint('request_id', name='Request_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('RequestHistory',
    sa.Column('history_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('request_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['Pending'::character varying, 'Approved'::character varying, 'Rejected'::character varying]::text[])", name='RequestHistory_status_check'),
    sa.ForeignKeyConstraint(['request_id'], ['Request.request_id'], name='RequestHistory_request_id_fkey'),
    sa.PrimaryKeyConstraint('history_id', name='RequestHistory_pkey')
    )
    # ### end Alembic commands ###
